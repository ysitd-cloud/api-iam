// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

/*
	Package iam is a generated protocol buffer package.

	It is generated from these files:
		service.proto

	It has these top-level messages:
		GetRealmByIDRequest
		GetRealmByIDResponse
		GetAllRealmRequest
		GetAllRealmResponse
*/
package iam

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import modals "code.ysitd.cloud/api/iam/modals"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetRealmByIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetRealmByIDRequest) Reset()                    { *m = GetRealmByIDRequest{} }
func (*GetRealmByIDRequest) ProtoMessage()               {}
func (*GetRealmByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *GetRealmByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetRealmByIDResponse struct {
	Exists bool          `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Realm  *modals.Realm `protobuf:"bytes,2,opt,name=realm" json:"realm,omitempty"`
}

func (m *GetRealmByIDResponse) Reset()                    { *m = GetRealmByIDResponse{} }
func (*GetRealmByIDResponse) ProtoMessage()               {}
func (*GetRealmByIDResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *GetRealmByIDResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *GetRealmByIDResponse) GetRealm() *modals.Realm {
	if m != nil {
		return m.Realm
	}
	return nil
}

type GetAllRealmRequest struct {
}

func (m *GetAllRealmRequest) Reset()                    { *m = GetAllRealmRequest{} }
func (*GetAllRealmRequest) ProtoMessage()               {}
func (*GetAllRealmRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

type GetAllRealmResponse struct {
	Realm []modals.Realm `protobuf:"bytes,1,rep,name=realm" json:"realm"`
}

func (m *GetAllRealmResponse) Reset()                    { *m = GetAllRealmResponse{} }
func (*GetAllRealmResponse) ProtoMessage()               {}
func (*GetAllRealmResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *GetAllRealmResponse) GetRealm() []modals.Realm {
	if m != nil {
		return m.Realm
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRealmByIDRequest)(nil), "iam.GetRealmByIDRequest")
	proto.RegisterType((*GetRealmByIDResponse)(nil), "iam.GetRealmByIDResponse")
	proto.RegisterType((*GetAllRealmRequest)(nil), "iam.GetAllRealmRequest")
	proto.RegisterType((*GetAllRealmResponse)(nil), "iam.GetAllRealmResponse")
}
func (this *GetRealmByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRealmByIDRequest)
	if !ok {
		that2, ok := that.(GetRealmByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetRealmByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRealmByIDResponse)
	if !ok {
		that2, ok := that.(GetRealmByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	if !this.Realm.Equal(that1.Realm) {
		return false
	}
	return true
}
func (this *GetAllRealmRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllRealmRequest)
	if !ok {
		that2, ok := that.(GetAllRealmRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAllRealmResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllRealmResponse)
	if !ok {
		that2, ok := that.(GetAllRealmResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Realm) != len(that1.Realm) {
		return false
	}
	for i := range this.Realm {
		if !this.Realm[i].Equal(&that1.Realm[i]) {
			return false
		}
	}
	return true
}
func (this *GetRealmByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&iam.GetRealmByIDRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRealmByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&iam.GetRealmByIDResponse{")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	if this.Realm != nil {
		s = append(s, "Realm: "+fmt.Sprintf("%#v", this.Realm)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllRealmRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&iam.GetAllRealmRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllRealmResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&iam.GetAllRealmResponse{")
	if this.Realm != nil {
		vs := make([]*modals.Realm, len(this.Realm))
		for i := range vs {
			vs[i] = &this.Realm[i]
		}
		s = append(s, "Realm: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IAM service

type IAMClient interface {
	GetRealmByID(ctx context.Context, in *GetRealmByIDRequest, opts ...grpc.CallOption) (*GetRealmByIDResponse, error)
	GetAllRealm(ctx context.Context, in *GetAllRealmRequest, opts ...grpc.CallOption) (*GetAllRealmResponse, error)
}

type iAMClient struct {
	cc *grpc.ClientConn
}

func NewIAMClient(cc *grpc.ClientConn) IAMClient {
	return &iAMClient{cc}
}

func (c *iAMClient) GetRealmByID(ctx context.Context, in *GetRealmByIDRequest, opts ...grpc.CallOption) (*GetRealmByIDResponse, error) {
	out := new(GetRealmByIDResponse)
	err := grpc.Invoke(ctx, "/iam.IAM/getRealmByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetAllRealm(ctx context.Context, in *GetAllRealmRequest, opts ...grpc.CallOption) (*GetAllRealmResponse, error) {
	out := new(GetAllRealmResponse)
	err := grpc.Invoke(ctx, "/iam.IAM/getAllRealm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IAM service

type IAMServer interface {
	GetRealmByID(context.Context, *GetRealmByIDRequest) (*GetRealmByIDResponse, error)
	GetAllRealm(context.Context, *GetAllRealmRequest) (*GetAllRealmResponse, error)
}

func RegisterIAMServer(s *grpc.Server, srv IAMServer) {
	s.RegisterService(&_IAM_serviceDesc, srv)
}

func _IAM_GetRealmByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealmByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetRealmByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.IAM/GetRealmByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetRealmByID(ctx, req.(*GetRealmByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetAllRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetAllRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.IAM/GetAllRealm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetAllRealm(ctx, req.(*GetAllRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iam.IAM",
	HandlerType: (*IAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRealmByID",
			Handler:    _IAM_GetRealmByID_Handler,
		},
		{
			MethodName: "getAllRealm",
			Handler:    _IAM_GetAllRealm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *GetRealmByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRealmByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetRealmByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRealmByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Exists {
		dAtA[i] = 0x8
		i++
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Realm != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Realm.Size()))
		n1, err := m.Realm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetAllRealmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRealmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAllRealmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRealmResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Realm) > 0 {
		for _, msg := range m.Realm {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetRealmByIDRequest(r randyService, easy bool) *GetRealmByIDRequest {
	this := &GetRealmByIDRequest{}
	this.Id = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRealmByIDResponse(r randyService, easy bool) *GetRealmByIDResponse {
	this := &GetRealmByIDResponse{}
	this.Exists = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.Realm = modals.NewPopulatedRealm(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAllRealmRequest(r randyService, easy bool) *GetAllRealmRequest {
	this := &GetAllRealmRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAllRealmResponse(r randyService, easy bool) *GetAllRealmResponse {
	this := &GetAllRealmResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Realm = make([]modals.Realm, v1)
		for i := 0; i < v1; i++ {
			v2 := modals.NewPopulatedRealm(r, easy)
			this.Realm[i] = *v2
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneService(r randyService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringService(r randyService) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneService(r)
	}
	return string(tmps)
}
func randUnrecognizedService(r randyService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldService(dAtA []byte, r randyService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateService(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetRealmByIDRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetRealmByIDResponse) Size() (n int) {
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	if m.Realm != nil {
		l = m.Realm.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetAllRealmRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetAllRealmResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Realm) > 0 {
		for _, e := range m.Realm {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetRealmByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRealmByIDRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRealmByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRealmByIDResponse{`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`Realm:` + strings.Replace(fmt.Sprintf("%v", this.Realm), "Realm", "modals.Realm", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAllRealmRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAllRealmRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetAllRealmResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAllRealmResponse{`,
		`Realm:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Realm), "Realm", "modals.Realm", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetRealmByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRealmByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRealmByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRealmByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRealmByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRealmByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Realm == nil {
				m.Realm = &modals.Realm{}
			}
			if err := m.Realm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRealmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRealmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRealmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRealmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRealmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRealmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realm = append(m.Realm, modals.Realm{})
			if err := m.Realm[len(m.Realm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x41, 0x4e, 0xe3, 0x30,
	0x14, 0x8d, 0xdb, 0x99, 0xaa, 0xe3, 0x4e, 0x67, 0x24, 0x4f, 0x35, 0x84, 0x2c, 0x4c, 0x15, 0x84,
	0x54, 0x24, 0x48, 0xa4, 0x72, 0x01, 0x1a, 0x81, 0xaa, 0x2e, 0x90, 0x4a, 0x38, 0x81, 0x9b, 0x98,
	0x60, 0x29, 0xc6, 0xa5, 0x4e, 0x10, 0xdd, 0x71, 0x84, 0x1e, 0x83, 0x23, 0x70, 0x84, 0x2e, 0xbb,
	0x64, 0x85, 0x88, 0xd9, 0xb0, 0xec, 0x92, 0x25, 0xaa, 0x93, 0xaa, 0x40, 0xbb, 0xb2, 0xff, 0x7f,
	0xcf, 0xef, 0x3d, 0xeb, 0xc1, 0xba, 0xa4, 0xa3, 0x5b, 0x16, 0x50, 0x67, 0x38, 0x12, 0x89, 0x40,
	0x65, 0x46, 0xb8, 0x75, 0x18, 0xb1, 0xe4, 0x2a, 0x1d, 0x38, 0x81, 0xe0, 0x6e, 0x24, 0x22, 0xe1,
	0x6a, 0x6c, 0x90, 0x5e, 0xea, 0x49, 0x0f, 0xfa, 0x96, 0xbf, 0xb1, 0x0e, 0x02, 0x11, 0x52, 0x67,
	0x2c, 0x59, 0x12, 0x3a, 0x41, 0x2c, 0xd2, 0xd0, 0x25, 0x43, 0xe6, 0x32, 0xc2, 0x5d, 0x2e, 0x42,
	0x12, 0xcb, 0xe2, 0xc8, 0xd9, 0xf6, 0x1e, 0xfc, 0xd7, 0xa5, 0x89, 0x4f, 0x49, 0xcc, 0xbd, 0x71,
	0xef, 0xc4, 0xa7, 0x37, 0x29, 0x95, 0x09, 0xfa, 0x03, 0x4b, 0x2c, 0x34, 0x41, 0x13, 0xb4, 0x7e,
	0xf9, 0x25, 0x16, 0xda, 0x17, 0xb0, 0xf1, 0x95, 0x26, 0x87, 0xe2, 0x5a, 0x52, 0xf4, 0x1f, 0x56,
	0xe8, 0x1d, 0x93, 0x89, 0xd4, 0xdc, 0xaa, 0x5f, 0x4c, 0x68, 0x17, 0xfe, 0x1c, 0x2d, 0xc8, 0x66,
	0xa9, 0x09, 0x5a, 0xb5, 0x76, 0xdd, 0x29, 0x4c, 0xb5, 0x82, 0x9f, 0x63, 0x76, 0x03, 0xa2, 0x2e,
	0x4d, 0x3a, 0x71, 0x9c, 0x6f, 0x73, 0x6b, 0xfb, 0x58, 0x27, 0x5a, 0x6d, 0x0b, 0xa7, 0xfd, 0xa5,
	0x22, 0x68, 0x96, 0xd7, 0x14, 0xbd, 0x1f, 0xd3, 0xe7, 0x1d, 0xa3, 0xd0, 0x6d, 0x4f, 0x00, 0x2c,
	0xf7, 0x3a, 0x67, 0xe8, 0x14, 0xfe, 0x8e, 0x3e, 0x85, 0x46, 0xa6, 0xc3, 0x08, 0x77, 0x36, 0x7c,
	0xd7, 0xda, 0xde, 0x80, 0xe4, 0xbe, 0xb6, 0x81, 0x3c, 0x58, 0x8b, 0x56, 0x81, 0xd0, 0xd6, 0x92,
	0xfb, 0x2d, 0xb8, 0x65, 0xae, 0x03, 0x4b, 0x0d, 0xef, 0x7c, 0x96, 0x61, 0xe3, 0x29, 0xc3, 0xc6,
	0x3c, 0xc3, 0xe0, 0x3d, 0xc3, 0xe0, 0x5e, 0x61, 0xf0, 0xa0, 0x30, 0x78, 0x54, 0x18, 0x4c, 0x15,
	0x06, 0x33, 0x85, 0xc1, 0x8b, 0xc2, 0xe0, 0x4d, 0x61, 0x63, 0xae, 0x30, 0x98, 0xbc, 0x62, 0x03,
	0xfe, 0xd5, 0xfd, 0x15, 0x5d, 0x32, 0xc2, 0xbd, 0x6a, 0x8f, 0xf0, 0xfe, 0xa2, 0xb7, 0x3e, 0x18,
	0x54, 0x74, 0x81, 0x47, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xad, 0x9a, 0x15, 0x33, 0x02,
	0x00, 0x00,
}
